{"version":3,"sources":["utils/axios.js","components/Header.js","components/SearchBox.js","components/Movie.js","components/MovieList.js","components/AppLoader.js","views/App.js","serviceWorker.js","index.js"],"names":["axios","AxiosInstance","create","baseURL","headers","Accept","Header","text","className","SearchBox","search","searchForm","useRef","useState","searchValue","setSearchValue","action","ref","type","name","placeholder","required","onChange","evt","target","value","onClick","preventDefault","current","reset","Movie","movie","Title","src","Poster","alt","Year","MovieList","movies","length","map","index","key","AppLoader","props","App","setMovies","loading","setLoading","useEffect","get","then","res","data","Search","catch","err","console","error","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yUAEaA,E,OAAQC,EAAcC,OAAO,CACzCC,QAAS,0BACTC,QAAS,CACRC,OAAQ,4B,MCOKC,MATf,YAAwB,IAAPC,EAAM,EAANA,KAEhB,OACC,4BAAQC,UAAU,mCACjB,wBAAIA,UAAU,mBAAmBD,K,MCJrB,SAASE,EAAT,GAA6B,IAATC,EAAQ,EAARA,OAC5BC,EAAaC,iBAAO,MADgB,EAEJC,mBAAS,IAFL,mBAEnCC,EAFmC,KAEtBC,EAFsB,KAkB1C,OACC,0BAAMC,OAAO,IAAIR,UAAU,gBAAgBS,IAAKN,GAC/C,2BACCH,UAAU,uBACVU,KAAK,SACLC,KAAK,MACLC,YAAY,yBACZC,UAAQ,EACRC,SAlBH,SAAmCC,GAClCR,EAAeQ,EAAIC,OAAOC,UAmBzB,4BACCP,KAAK,SACLV,UAAU,4BACVkB,QAnBH,SAA4BH,GAC3BA,EAAII,iBACJjB,EAAOI,GATPH,EAAWiB,QAAQC,UAuBlB,W,MC1BY,SAASC,EAAT,GAAwB,IAARC,EAAO,EAAPA,MAE9B,OACC,wBAAIvB,UAAU,2BACb,wBAAIA,UAAU,kBAAkBuB,EAAMC,OACtC,yBAAKxB,UAAU,kBACdyB,IAAMF,EAAMG,QAA2B,QAAjBH,EAAMG,OAEzBH,EAAMG,OAVqB,sCAW9BC,IAAKJ,EAAMC,QAEZ,yBAAKxB,UAAU,iBAAf,WAAoCuB,EAAMK,KAA1C,OCZY,SAASC,EAAT,GAA+B,IAAVC,EAAS,EAATA,OACnC,OAAqB,IAAlBA,EAAOC,OAAqB,KAG9B,oCACC,uBAAG/B,UAAU,oBAAb,wCACA,wBAAIA,UAAU,gBACZ8B,EAAOE,KAAI,SAACT,EAAOU,GAAR,OAAkB,kBAACX,EAAD,CAAOC,MAAOA,EAAOW,IAAKD,S,UCA7CE,EARG,SAACC,GACjB,OACE,yBAAKpC,UAAU,iBACd,yBAAKA,UAAU,yBAAf,gBCsCUqC,MAlCf,WAAgB,IAAD,EACehC,mBAAS,IADxB,mBACNyB,EADM,KACEQ,EADF,OAEiBjC,oBAAS,GAF1B,mBAENkC,EAFM,KAEGC,EAFH,KAuBb,OAnBAC,qBAAU,WACRjD,EAAMkD,IAAN,0BAPmB,oBAQhBC,MAAK,SAAAC,GACJN,EAAUM,EAAIC,KAAKC,QACnBN,GAAW,MAEZO,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,QAC9B,IAaA,yBAAKhD,UAAU,OACb,kBAAC,EAAD,CAAQD,KAAK,WACb,kBAACE,EAAD,CAAWC,OAbf,SAAgBe,GACduB,GAAW,GACXhD,EAAMkD,IAAN,cAAiBzB,EAAjB,YAjBmB,oBAkBhB0B,MAAK,SAAAC,GACJN,EAAUM,EAAIC,KAAKC,QACnBN,GAAW,MAEZO,OAAM,SAAAC,GAAG,OAAIC,QAAQE,IAAIH,SAOzBT,EACG,kBAAC,EAAD,MACA,kBAACV,EAAD,CAAWC,OAAQA,M,iBC3BTsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMiB,c","file":"static/js/main.a8c58fe7.chunk.js","sourcesContent":["import AxiosInstance from \"axios\";\r\n\r\nexport const axios = AxiosInstance.create({\r\n\tbaseURL: \"http://www.omdbapi.com/\",\r\n\theaders: {\r\n\t\tAccept: \"application/json,utf-8\"\r\n\t}\r\n});","import React from 'react';\r\nimport \"../styles/header.css\";\r\n\r\nfunction Header({text}){\r\n\r\n\treturn (\r\n\t\t<header className=\"c-header c-header--center-items\">\r\n\t\t\t<h1 className=\"c-header__title\">{text}</h1>\r\n\t\t</header>\r\n\t)\r\n}\r\n\r\nexport default Header;","import React, {useState, useRef} from \"react\";\r\nimport \"../styles/search-box.css\";\r\n\r\nexport default function SearchBox({search}){\r\n\tconst searchForm = useRef(null);\r\n\tconst [searchValue, setSearchValue] = useState(\"\");\r\n\r\n\tfunction resetInputField(){\r\n\t\tsearchForm.current.reset();\r\n\t}\r\n\r\n\tfunction handleChangeInSearchValue(evt){\r\n\t\tsetSearchValue(evt.target.value);\r\n\t}\r\n\r\n\tfunction callSearchFunction(evt){\r\n\t\tevt.preventDefault();\r\n\t\tsearch(searchValue);\r\n\t\tresetInputField();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form action=\"#\" className=\"c-search-form\" ref={searchForm}>\r\n\t\t\t<input \r\n\t\t\t\tclassName=\"c-search-form__input\" \r\n\t\t\t\ttype=\"search\" \r\n\t\t\t\tname=\"key\" \r\n\t\t\t\tplaceholder=\"Search for movies here\" \r\n\t\t\t\trequired\r\n\t\t\t\tonChange={handleChangeInSearchValue}\r\n\t\t\t\t/>\r\n\t\t\t<button \r\n\t\t\t\ttype=\"submit\" \r\n\t\t\t\tclassName=\"c-search-form__submit-btn\"\r\n\t\t\t\tonClick={callSearchFunction}\r\n\t\t\t\t>\r\n\t\t\t\tSearch\r\n\t\t\t</button>\r\n\t\t</form>\r\n\t)\r\n}","import React from \"react\";\r\nimport \"../styles/movie.css\";\r\n\r\nconst DEFAULT_PLACEHOLDER_IMAGE = \"https://via.placeholder.com/200x180\";\r\n\r\nexport default function Movie({movie}){\r\n\r\n\treturn (\r\n\t\t<li className=\"c-movie c-movie--shadow\">\r\n\t\t\t<h2 className=\"c-movie__title\">{movie.Title}</h2>\r\n\t\t\t<img className=\"c-movie__poster\" \r\n\t\t\t\tsrc={!movie.Poster || movie.Poster === \"N/A\" \r\n\t\t\t\t\t? DEFAULT_PLACEHOLDER_IMAGE\r\n\t\t\t\t\t: movie.Poster} \r\n\t\t\t\talt={movie.Title}\r\n\t\t\t/>\r\n\t\t\t<div className=\"c-movie__year\">{`(${movie.Year})`}</div>\r\n\t\t</li>\r\n\t)\r\n}","import React from \"react\";\r\nimport \"../styles/movie.css\";\r\nimport Movie from \"./Movie.js\";\r\n\r\nexport default function MovieList({ movies }){\r\n\tif(movies.length === 0) return null;\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<p className=\"movie-list-title\">Sharing a few of our favorite movies</p>\r\n\t\t\t<ul className=\"l-movie-list\">\r\n\t\t\t\t{movies.map((movie, index) => <Movie movie={movie} key={index}/>)}\r\n\t\t\t</ul>\r\n\t\t</>\r\n\t)\r\n}","import React from 'react';\r\nimport '../styles/AppLoader.css';\r\n\r\nconst AppLoader = (props) => {\r\n  return (\r\n    <div className=\"LoaderWrapper\">\r\n    \t<div className=\"LoaderWrapper__Loader\">Loading...</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AppLoader;","import React, { useState, useEffect } from 'react';\r\nimport '../styles/App.css';\r\nimport {axios} from \"../utils/axios\";\r\nimport Header from \"../components/Header.js\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport MovieList from \"../components/MovieList\";\r\nimport AppLoader from \"../components/AppLoader\";\r\n\r\nconst API_KEY_STRING = 'apikey=a5d7e42f'\r\n\r\nfunction App() {\r\n  const [movies, setMovies] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/?s=iron&apikey&${API_KEY_STRING}`)\r\n      .then(res => {\r\n        setMovies(res.data.Search);\r\n        setLoading(false);\r\n      })\r\n      .catch(err => console.error(err))\r\n  },[])\r\n\r\n  function search(value){\r\n    setLoading(true);\r\n    axios.get(`/?s=${value}&${API_KEY_STRING}`)\r\n      .then(res => {\r\n        setMovies(res.data.Search);\r\n        setLoading(false);\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header text=\"Movies\"/>\r\n      <SearchBox search={search}/>\r\n      {loading \r\n        ? <AppLoader />\r\n        : <MovieList movies={movies} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './styles/index.css';\nimport App from './views/App';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}